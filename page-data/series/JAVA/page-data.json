{"componentChunkName":"component---src-templates-series-jsx","path":"/series/JAVA","result":{"data":{"posts":{"nodes":[{"excerpt":"String 재사용(Interning) new 연산자를 이용한 방식\nnew를 통해 String을 생성하면 Heap 영역에 존재하게 된다. 리터럴을 이용한 방식\nstring constant pool이라는 영역에 존재하게 된다. 해당 코드를 실행하면 객체가 3개가 아니라 2개가 만들어진다. 왜 2개일까? 이 두가지의 문자열 생성 방식은 JVM이 관리하는 메모…","fields":{"slug":"/string-pool/"},"frontmatter":{"date":"January 13, 2024","update":"Jan 13, 2024","title":"Java String VS new String()","tags":["JAVA"]}},{"excerpt":"1. String Java의 String은 불변입니다. 즉, 일단 생성된 값은 변경할 수 없습니다.  \n'String'을 수정하는 것처럼 보이는 작업을 수행할 때마다 실제로는 새로운 'String' 개체를 생성하는 것입니다. 특성 Immutable(불변): String 객체가 생성되면 해당 값을 변경할 수 없습니다. Thread-safe(스레드로부터 안전…","fields":{"slug":"/string-stringBuffer-stringBuilder/"},"frontmatter":{"date":"January 14, 2024","update":"Jan 16, 2024","title":"String & StringBuffer & StringBuilder 차이","tags":["JAVA"]}},{"excerpt":"1. String Java의 String은 불변입니다. 즉, 일단 생성된 값은 변경할 수 없습니다.  \n'String'을 수정하는 것처럼 보이는 작업을 수행할 때마다 실제로는 새로운 'String' 개체를 생성하는 것입니다. 특성 Immutable(불변): String 객체가 생성되면 해당 값을 변경할 수 없습니다. Thread-safe(스레드로부터 안전…","fields":{"slug":"/rest-api-url-naming/"},"frontmatter":{"date":"January 14, 2024","update":"Jan 16, 2024","title":"REST API URL Naming","tags":["JAVA"]}}]}},"pageContext":{"series":"JAVA"}},"staticQueryHashes":[]}