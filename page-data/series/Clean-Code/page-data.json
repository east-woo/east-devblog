{"componentChunkName":"component---src-templates-series-jsx","path":"/series/Clean-Code","result":{"data":{"posts":{"nodes":[{"excerpt":"Chapter 01. 깨끗한 코드 & Chapter 02. 의미 있는 이름\npage 1 ~ 38 나쁜 코드 성능이 나쁜 코드 불필요한 연산이 들어가서\n개선의 여지가 있는 코드 의미가 모호한 코드 이해하기 어려운 코드 네이밍과 그 내용이 다른 코드 중복된 코드 비슷한 내용인데 중복되는 코드들은\n버그를 남는다. 나쁜 코드가 나쁜이유  깨진 유리창 법칙 나쁜 …","fields":{"slug":"/CleanCode-1/"},"frontmatter":{"date":"June 10, 2024","update":"Jun 10, 2024","title":"[클린코드-1] 클린 코드와 그 첫걸음","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 03. 함수\npage 39 ~ 66 SOLID원칙 (객체지향 설계의 5가지 원칙)  SRP( Single Responsibility Principle ), 단일 책임 원칙  객체는 단 하나의 책임만 가져야 한다는 원칙. 클래스는 하나의 기능만 가지며, 어떤 변화에 의해 클래스를 변경 해야 하는 이유는 오직 하나뿐이어야 한다. SRP 책임이 …","fields":{"slug":"/CleanCode-2/"},"frontmatter":{"date":"June 11, 2024","update":"Jun 11, 2024","title":"[클린코드-2] 함수를 안전하고 간결하게 작성하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 04. 주석\npage 67 ~ 94 주석을 최대한 쓰지 말자 주석은 나쁜 코드를 보완하지 못한다. 코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다.\n자신이 저지른 난장판을 주석으로 설명하지 말고 개선하는데 시간을 보내야 한다.\n코드로도 의도를 표현할 수 있다! 주석은 방치된다. 코드의 변화에 따라가지 못하고, 주석은 방지…","fields":{"slug":"/CleanCode-3/"},"frontmatter":{"date":"June 13, 2024","update":"Jun 13, 2024","title":"[클린코드-3] 코드를 보조하는 주석","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 05. 형식 맞추기\npage 95 ~ 116 포멧팅이 중요한 이유 가독성이 필수적이다. 코드를 수월하게 읽어나갈 수 있다. 아마추어처럼 보이지 않는다. 포맷팅으로 인해 코드를 잘못해석해 버그를 발생할 위험을 줄인다! 클린코드 포맷팅 적절한 길이 유지 👍~200 lines < 500 lines 200라인 “코드 길이를 200줄 정도로 제한하는…","fields":{"slug":"/CleanCode-4/"},"frontmatter":{"date":"June 14, 2024","update":"Jun 14, 2024","title":"[클린코드-4] 코드의 가독성에 필수적인 포맷팅","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 06. 객체와 자료구조\npage 117 ~ 128 자료구조 vs 객체 자료구조 객체 데이터 그 자체 비즈니스 로직과 관련 자료를 공개한다. 자료를 숨기고,  추상화한다.자료를 다루는 함수만 공개한다. 변수 사이에 조회 함수와 설정 함수로 변수를 다룬다고 객체가 되지 않는다(getter, setter) 추상 인터페이스를 제공해 사용자가 구현을…","fields":{"slug":"/CleanCode-5/"},"frontmatter":{"date":"June 20, 2024","update":"Jun 20, 2024","title":"[클린코드-5] 객체와 자료구조로 데이터 표현하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 07. 오류 처리\npage 129 ~ 142 1. 예외 처리 방식 1) 오류 코드를 리턴하지 말고, 예외를 던져라 옛날에는 오류를 나타낼 때 에러코드를 던졌다. 하지만 예외를 던지는 것이 명확하고, 처리 흐름이 깔끔해진다. 2) 예외를 던지고, 처리하는 방식 1번 구역. 오류가 발생한 부분에서 예외를 던진다.\n(별도의 처리가 필요한 예외라면…","fields":{"slug":"/CleanCode-6/"},"frontmatter":{"date":"June 29, 2024","update":"Jun 29, 2024","title":"[클린코드-6] 우아하게 예외 처리하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 08. 경계\npage 143 ~ 152 1. 경계란  오픈소스, 라이브러리를 안쓰는 프로젝트는 없다. 우리가 만든 코드에 외부에서 들어온 코드를 병합해야 한다. 외부 코드는 외부에서 만든 코드인데, 외부 시스템과 호출하거나 단순히 외부에서 만들어진 코드일 수 있다. 우리 코드와 외부 코드를 깔끔하게 통합시키기 위해 경계를 잘 지어야 한다. …","fields":{"slug":"/CleanCode-7/"},"frontmatter":{"date":"June 30, 2024","update":"Jun 30, 2024","title":"[클린코드-7] 모호한 경계를 적당히 구분짓기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 09. 단위 테스트\npage 153 ~ 170 1. 테스트 코드의 중요성 테스트 코드는 중요하다 테스트 코드는 실수를 바로잡아준다. 테스트 코드는 반드시 존재해야하며, 실제 코드 못지 않게 중요하다. 테스트 케이스는 변경이 쉽도록 한다. 코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 단위테스트다. \n테스트 케이스가 있으면 변…","fields":{"slug":"/CleanCode-8/"},"frontmatter":{"date":"July 01, 2024","update":"Jul 01, 2024","title":"[클린코드-8] 깨끗한 테스트 코드","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 10. 클래스\npage 171 ~ 192 1.캡슐화되어야 한다  캡술화 : 객체의 실제 구현을 외부로부터 감추는 방식 클래스를 개발할 때 기본적으로 구현을 감추고, 외부 객체와 상호작용하는 부분만 노출한다 외부의 잘못된 사용을 방지한다 경계에서 배웠던 Map 과 동일한 개념 Stack 예제 필드를 private로 제한, get으로 읽기 수정…","fields":{"slug":"/CleanCode-9/"},"frontmatter":{"date":"July 02, 2024","update":"Jul 02, 2024","title":"[클린코드-9] 클래스 잘 설계하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 11. 시스템\npage 193 ~ 214 “복잡성은 죽음이다. 개발자에게서 생기를 앗아가며, 제품을 계획하고 제작하고 테스트하기 어렵게 만든다.” \n레이 오지(Ray Ozzie) 서론: 도시 만들기 도시를 세운다면? 도시를 세운다면 온갖 세세한 사항을 혼자서 직접 관리할 수는 없다. \n이미 세워진 도시라도 한 사람의 힘으로는 무리다. 그럼에…","fields":{"slug":"/CleanCode-10/"},"frontmatter":{"date":"July 04, 2024","update":"Jul 04, 2024","title":"[클린코드-10] 클래스 잘 설계하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 12. 창발성\npage 215 ~ 224 1. 창발적 설계란 1) 창발성(Emergence) 창발성(創發性)\n명사 남이 모르거나 하지 아니한 것을 처음으로 또는 새롭게 밝혀내거나 이루어 내는 성질. 하위 계층에는 없는 특성이나 행동이 상위 계층(전체 구조)에서 자발적으로 돌연히 출연하는 현상 각각의 개미는 집을 지을 능력이 없지만, 작은 개…","fields":{"slug":"/CleanCode-11/"},"frontmatter":{"date":"July 05, 2024","update":"Jul 05, 2024","title":"[클린코드-11] 창발적 설계로 깔끔한 코드 구현하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 13. 동시성\npage 225 ~ 244\n부록 407 ~ 466 1. 동시성 프로그래밍이란 어플리케이션을 효율적으로 실행하기 위해 멀티코어를 온전히 활용하도록 구현하는 방식 외부 서비스의 응답을 기다리면서 아무일도 하지 않으면 CPU 사이클이 낭비된다 낭비되는 자원을 줄이자 동시성 프로그래밍 이해하기  동시성이 구현되지 않는 경우  서버가 …","fields":{"slug":"/CleanCode-12/"},"frontmatter":{"date":"July 09, 2024","update":"Jul 09, 2024","title":"[클린코드-12] 동시성을 구현할 때 명심할 것들","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 14. 점진적인 개선\npage 245 ~ 322 1. 책의 예제 명령형 인수 구문 분석기 코드 초안  모든 로직이 하나의 클래스에 들어가있다. 처음부터 지저분한 코드를 짜려는 생각은 없었고, 코드를 어느정도 손 봤지만 새로운 인수 유형이 들어오면서 재앙이 시작됐다. 이제는 개선해야 할 때 라는걸 깨닫고, 변경 전후 시스템이 동일하게 돌아간다…","fields":{"slug":"/CleanCode-13/"},"frontmatter":{"date":"July 10, 2024","update":"Jul 10, 2024","title":"[클린코드-13] 코드를 점진적으로 개선하기","tags":["독서","Clean Code"]}},{"excerpt":"Chapter 15. JUnit 들여다보기\nChapter 16. SerialDate 리팩터링\npage 323 ~ 366 1. 책 내용 JUnit 프레임워크 JUnit은 자바 테스팅 프레임워크다. 사실상 표준이라고 할만큼 널리 사용되고 있다. 개념은 단순하며 정의는 정밀하고 구현은 우아하다. JUnit은 저자가 많지만 시작은 켄트 벡과 에릭 감마, 두 사람…","fields":{"slug":"/CleanCode-14/"},"frontmatter":{"date":"July 14, 2024","update":"Jul 14, 2024","title":"[클린코드-14] 라이브러리 분석을 통해 코드를 바라보는 시각 기리기","tags":["독서","Clean Code"]}}]}},"pageContext":{"series":"Clean Code"}},"staticQueryHashes":[]}