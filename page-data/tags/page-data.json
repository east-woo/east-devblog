{"componentChunkName":"component---src-pages-tags-jsx","path":"/tags/","result":{"data":{"site":{"siteMetadata":{"title":"east-woo"}},"allMarkdownRemark":{"group":[{"fieldValue":"Convention","totalCount":1},{"fieldValue":"JAVA","totalCount":3},{"fieldValue":"OS","totalCount":2}],"nodes":[{"excerpt":"1. String Java의 String은 불변입니다. 즉, 일단 생성된 값은 변경할 수 없습니다.  \n'String'을 수정하는 것처럼 보이는 작업을 수행할 때마다 실제로는 새로운 'String' 개체를 생성하는 것입니다. 특성 Immutable(불변): String 객체가 생성되면 해당 값을 변경할 수 없습니다. Thread-safe(스레드로부터 안전…","fields":{"slug":"/string-stringBuffer-stringBuilder/"},"frontmatter":{"date":"January 14, 2024","update":"Jan 16, 2024","title":"String & StringBuffer & StringBuilder 차이","tags":["JAVA"]}},{"excerpt":"1. String Java의 String은 불변입니다. 즉, 일단 생성된 값은 변경할 수 없습니다.  \n'String'을 수정하는 것처럼 보이는 작업을 수행할 때마다 실제로는 새로운 'String' 개체를 생성하는 것입니다. 특성 Immutable(불변): String 객체가 생성되면 해당 값을 변경할 수 없습니다. Thread-safe(스레드로부터 안전…","fields":{"slug":"/rest-api-url-naming/"},"frontmatter":{"date":"January 14, 2024","update":"Jan 16, 2024","title":"REST API URL Naming","tags":["JAVA"]}},{"excerpt":"❗ 각 회사, 프로젝트 마다 git flow 전략을 가지고 브랜치를 관리 하는 것 처럼  commit message 작성하는 규칙도 중요하다고 생각하여 이 글을 작성합니다.  git flow 전략  1. Git 커밋 메시지란 무엇인가요? Git의 맥락에서 커밋 메시지는 특정 커밋의 변경 사항을 설명하는 간략한 설명입니다. \n이는 프로젝트 이력에 대한 문서…","fields":{"slug":"/git-commit-message-convention/"},"frontmatter":{"date":"January 13, 2024","update":"Jan 13, 2024","title":"Git Commit Message Convention","tags":["Convention"]}},{"excerpt":"String 재사용(Interning) new 연산자를 이용한 방식\nnew를 통해 String을 생성하면 Heap 영역에 존재하게 된다. 리터럴을 이용한 방식\nstring constant pool이라는 영역에 존재하게 된다. 해당 코드를 실행하면 객체가 3개가 아니라 2개가 만들어진다. 왜 2개일까? 이 두가지의 문자열 생성 방식은 JVM이 관리하는 메모…","fields":{"slug":"/string-pool/"},"frontmatter":{"date":"January 13, 2024","update":"Jan 13, 2024","title":"Java String VS new String()","tags":["JAVA"]}},{"excerpt":"💡 프로세스 간 메시지를 전송하거나, 공유메모리를 통해 공유된 자원에 여러 개의 프로세스가 동시에 접근하면 임계영역(여러 프로세스가 데이터를 공유하며 수행될 때, 각 프로세스에서 공유 데이터를 접근하는 프로그램 코드 블록) 문제가 발생할 수 있다. \n이를 해결하기 위해 데이터를 한 번에 하나의 프로세스만 접근할 수 있도록 제한을 두는 동기화 방식을 취해야…","fields":{"slug":"/critical-sections/"},"frontmatter":{"date":"January 11, 2024","update":"Jan 11, 2024","title":"임계영역(Critical Section), 세마포어(Semaphore) vs 뮤텍스(Mutex)","tags":["OS"]}},{"excerpt":"1. 교착상태(Dead Lock)란?  두 개 이상의 작업이 서로 상대방의 작업이 끝나기만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태 둘 이상의 프로세스가 각각의 프로세스가 점유 하고 있는 자원을 서로 기다릴때 무한대기에 빠지는 상황 1.1 교착상태 발생 경우 Process1 이 Resource1 을 점유하고 있다. Process2 …","fields":{"slug":"/deadlock/"},"frontmatter":{"date":"January 09, 2024","update":"Jan 09, 2024","title":"🤔 교착상태 vs 기아상태 vs 경합상태","tags":["OS"]}}]}},"pageContext":{}},"staticQueryHashes":[]}